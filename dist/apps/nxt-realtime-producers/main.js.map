{"version":3,"file":"main.js","mappings":"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","sources":["webpack://socket/./libs/interfaces/src/index.ts","webpack://socket/./libs/interfaces/src/types.ts","webpack://socket/./libs/producers/logger/src/index.ts","webpack://socket/external commonjs \"chokidar\"","webpack://socket/external commonjs \"socket.io-client\"","webpack://socket/external commonjs \"tslib\"","webpack://socket/external node-commonjs \"child_process\"","webpack://socket/external node-commonjs \"fs\"","webpack://socket/external node-commonjs \"path\"","webpack://socket/webpack/bootstrap","webpack://socket/./apps/nxt-realtime-producers/src/main.ts"],"sourcesContent":["export * from './types';\n","import { Namespace } from 'socket.io';\nimport { Socket, io } from 'socket.io-client';\n\nexport interface IModule {\n    name: string;\n    init(io: Namespace): void;\n}\n\nexport abstract class DataProducer {\n    protected socket: Socket;\n    protected url: string;\n\n    constructor(url: string) {\n        this.url = url;\n        this.socket = io(this.url);\n    }\n\n    abstract init(): void;\n\n    // protected send<T>(data: T): void {\n    //     throw TypeError('The child class must overrides \"send\" method.');\n    // }\n}\n\nexport enum ELogTypes {\n    appLog = 'applog',\n    sysLog = 'syslog',\n    all = 'all',\n}\n\nexport type ISysLogMessage = {\n    type: ELogTypes.sysLog;\n    message: string;\n    created: number;\n    appId: number;\n    appType: string;\n    appName: string;\n    subType: string;\n    nodeId: number;\n};\n\nexport type IAppLogMessage = {\n    type: ELogTypes.appLog;\n    message: string;\n    created: number;\n    nodeId: number;\n};\n\nexport type ILogData = {\n    nodeId: number,\n    data: ISysLogMessage | IAppLogMessage,\n};\n","import { FSWatcher, watch } from 'chokidar';\nimport { basename } from 'path';\nimport { DataProducer, ELogTypes, ILogData } from '@socket/interfaces';\nimport * as path from 'path';\nimport { spawn } from 'child_process';\nimport { IFile } from './types';\nimport * as fs from 'fs';\n\nconst sysLog = 'system.ts';\nconst MSG_PER_SECONDS = 500;\n\nexport class LoggerProducer extends DataProducer {\n    private nodeId: number;\n    private appLogsPath: string;\n    private sysLogsPath: string;\n    private excludeAppLogRegexp: RegExp;\n    private excludeSysLogRegexp: RegExp;\n    private watcher: FSWatcher;\n    private mapFiles: Map<string, IFile> = new Map();\n\n    constructor(nodeId: number, url: string, appLogsPath: string, sysLogsPath: string, exclude: any) {\n        super(url);\n        this.nodeId = nodeId;\n        this.appLogsPath = appLogsPath;\n        this.sysLogsPath = sysLogsPath;\n        this.excludeAppLogRegexp = new RegExp(\n            `(${exclude.applog.join('|')})`,\n            'i'\n        );\n        this.excludeSysLogRegexp = new RegExp(\n            `(${exclude.syslog.join('|')})`,\n            'i'\n        );\n        this.watcher = watch(this.appLogsPath, {\n            ignoreInitial: true,\n        });\n    }\n\n    // init() {\n    //     this.socket.on('connect', this.watch.bind(this));\n\n    // this.socket.on('message', this.onMessage);\n\n    //     this.socket.on('error', (error) => console.log('Ooops', error));\n    // }\n    init() {\n        this.socket.on('connect', this._watchAll.bind(this));\n        this.socket.on('message', (jsonData) => this._onMessage(jsonData));\n        this.socket.on('error', (error) => console.log('Ooops', error));\n    }\n\n    // private watch() {\n    //     this.watcher.on('add', (path) => {\n    //         const data = this.converter(path);\n    //         this.send(data);\n    //     });\n\n    //     this.watcher.on('unlink', (path) => {\n    //         // this.mapFiles.delete(path);\n    //         console.log(`File ${path} has been removed`, this.mapFiles);\n    //     });\n\n    //     this.watcher.on('ready', () => {\n    //         console.log(\n    //             `WatcherID: \"${this.socket.id}\" ready to changes!!!`,\n    //             this.mapFiles\n    //         );\n    //     });\n    // }\n\n    // private send(data: ILogMessage) {\n    //     this.socket.emit('data', data);\n    // }\n\n    // private addFile() {\n    //     this.mapFiles.set();\n    // }\n\n    // private onMessage(message) {}\n\n/*\n    private converter(path: string) {\n        const filename = basename(path);\n        const fileDomains = filename.split('.');\n        let data: ILogData;\n\n        if (filename === sysLog) {\n            data = {\n                type: ELogTypes.sysLog,\n                message: filename,\n                created: +new Date(),\n                appId: 1,\n                appName: filename,\n                appType: fileDomains[0],\n                subType: fileDomains[1],\n                nodeId: 1,\n            };\n        } else {\n            data = {\n                type: ELogTypes.appLog,\n                message: filename,\n                created: +new Date(),\n                nodeId: 1,\n            };\n        }\n\n        return data;\n    }\n*/\n\n    isTrashData(data: string, filename: string) {\n        if (filename === this.sysLogsPath) {\n            return this.excludeSysLogRegexp.test(data);\n        } else {\n            return this.excludeAppLogRegexp.test(data);\n        }\n    }\n\n    _watch(filename: string) {\n        const info = this._parseFilename(filename);\n\n        if (!info.type) return;\n\n        const file: IFile = {\n            counter: 0,\n            lastChunk: null,\n            tail: spawn('tail', `-f ${filename}`.split(' ')),\n        };\n\n        this.mapFiles.set(filename, file);\n\n        file.tail.stdout.setEncoding('utf8');\n        file.tail.stdout.on('data', (_chunk) => {\n            const chunk = _chunk.toString().trim();\n\n            if (this.isTrashData(chunk, filename)) return;\n\n            if (file.counter < MSG_PER_SECONDS) {\n                if (chunk !== file.lastChunk) {\n                    this.sendLog(chunk, info);\n                }\n\n                file.lastChunk = chunk;\n            } else if (file.counter === MSG_PER_SECONDS) {\n                this.sendLog('Too many logs per second', info);\n            }\n\n            file.counter++;\n        });\n\n        file.tail.stderr.on('data', (data) => {\n            this.debug(`stderr: ${data.toString()}`);\n        });\n        file.tail.on('error', (error) => {\n            this.debug(`error: ${error.message}`);\n        });\n        file.tail.on('close', (code) => {\n            this.debug(`close ${code}`);\n        });\n    }\n\n    _watchAll() {\n        this._unwatchAll();\n        this._watch(this.sysLogsPath);\n\n        this.watcher = watch(this.appLogsPath, {\n            persistent: true,\n            awaitWriteFinish: {\n                stabilityThreshold: 200,\n                pollInterval: 1000,\n            },\n        });\n\n        this.watcher\n            .on('add', (fname) => this._watch(fname))\n            .on('unlink', (fname) => this._unwatch(fname));\n    }\n\n    // send(receiver, data, tag = null) {\n    //     this.service.send(\n    //         JSON.stringify({\n    //             receiver,\n    //             data,\n    //             tag,\n    //         })\n    //     );\n    // }\n\n    sendLog(msg: string, info: any) {\n        const createdTime = Math.round(Date.now() / 1000);\n\n        switch (info.type) {\n            case ELogTypes.appLog:\n                this.socket.emit('data', {\n                    nodeId: this.nodeId,\n                    data: {\n                        type: info.type,\n                        message: msg,\n                        created: +createdTime,\n                        nodeId: +this.nodeId,\n                        appId: +info.appId,\n                        appType: info.appType,\n                        appName: info.appName,\n                        subType: info.subType,\n                    },\n                });\n                break;\n            case ELogTypes.sysLog:\n                this.socket.emit('data', {\n                    nodeId: this.nodeId,\n                    data: {\n                        type: info.type,\n                        message: msg,\n                        created: +createdTime,\n                        nodeId: +this.nodeId,\n                    },\n                });\n                break;\n        }\n    }\n\n    _unwatchAll() {\n        this.watcher && this.watcher.unwatch(this.appLogsPath);\n        this.mapFiles.forEach((item) => item.tail.kill('SIGINT'));\n        this.mapFiles.clear();\n    }\n\n    _unwatch(filename: string) {\n        if (this.mapFiles.has(filename)) {\n            this.mapFiles.get(filename)?.tail.kill('SIGINT');\n            this.mapFiles.delete(filename);\n        }\n    }\n\n    _parseFilename(filename: string) {\n        if (filename === sysLog) return { type: ELogTypes.sysLog };\n\n        const [appType, appId, appName, subType] = path\n            .basename(filename, '.log')\n            .replace('real--', '')\n            .split('--');\n\n        if (appType && appId) {\n            return {\n                type: ELogTypes.appLog,\n                appId,\n                appType,\n                appName,\n                subType,\n            };\n        }\n\n        return { type: null };\n    }\n\n    debug(message: string) {\n        const filename = '/var/log/logagent_debug.log';\n\n        try {\n            process.umask(0);\n\n            fs.appendFile(\n                `${filename}`,\n                new Date().toISOString() + '  ' + message + '\\n',\n                { mode: '777' },\n                (err) => {\n                    err && console.error(err.toString());\n                }\n            );\n        } catch (e) {}\n    }\n\n    async _onMessage(req: any) {\n        const { sender, error, data, tag } = JSON.parse(req);\n\n        if (sender === 'service_manager') {\n            console.error(error);\n            return;\n        }\n\n        try {\n            // const res = await Promise.resolve(this.onMessage(data, sender));\n\n            this.socket.emit('data', {\n                receiver: sender,\n                data,\n                tag,\n            });\n        } catch (e) {\n            this.socket.emit('data', {\n                receiver: sender,\n                error: e,\n                tag,\n            });\n        }\n    }\n}\n","module.exports = require(\"chokidar\");","module.exports = require(\"socket.io-client\");","module.exports = require(\"tslib\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {LoggerProducer} from \"@socket/producers/logger\";\n\nimport * as config from \"./config.json\";\n\nconst {logAgent: {applogDir, syslogFile, excludeMessages}} = config;\n\nconst producer = new LoggerProducer(15456451, 'ws://qa.nextologies.com:1807/logger', applogDir, syslogFile, excludeMessages);\n"],"names":[],"sourceRoot":""}